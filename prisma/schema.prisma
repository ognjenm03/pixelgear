generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================
// Enums
// =============================
enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PublishStatus {
  DRAFT
  PUBLISHED
}

// =============================
// User & Auth Tables
// =============================
model User {
  id        Int       @id @default(autoincrement())
  name      String?
  email     String?   @unique
  role      UserRole  @default(CUSTOMER)

  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  reviews   Review[]
  cart      Cart?
  comments  ProductComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                Int    @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =============================
// Catalog
// =============================
model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  products  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  products  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id         Int        @id @default(autoincrement())
  name       String
  slug       String     @unique
  price      Float
  stock      Int        @default(0)
  status     PublishStatus @default(PUBLISHED)
  brandId    Int
  categoryId Int
  imageUrl   String?

  brand      Brand       @relation(fields: [brandId], references: [id])
  category   Category    @relation(fields: [categoryId], references: [id])
  reviews    Review[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  comments   ProductComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =============================
// Reviews
// =============================
model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  body      String
  userId    Int
  productId Int

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =============================
// Cart and Orders
// =============================
model Cart {
  id     Int       @id @default(autoincrement())
  userId Int       @unique
  items  CartItem[]
  user   User      @relation(fields: [userId], references: [id])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int     @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id     Int       @id @default(autoincrement())
  userId Int
  status OrderStatus @default(PENDING)
  total  Float
  user   User        @relation(fields: [userId], references: [id])
  items  OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @default(1)
  unitPrice Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  body      String
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
